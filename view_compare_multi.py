import csv
import gym
import numpy as np
import torch
from stable_baselines3 import PPO
from joblib import load
from gym_env.toy_pong import ToyPong  # ƒê·∫£m b·∫£o import ƒë√∫ng m√¥i tr∆∞·ªùng ToyPong
from tabulate import tabulate  # Import th∆∞ vi·ªán ƒë·ªÉ t·∫°o b·∫£ng

# Load ch√≠nh s√°ch g·ªëc (PPO)
ppo_policy = PPO.load("log/ToyPong-v0_1env_learning_rate-HalfLinearSchedule(initial_value=0.0003)/model.zip")

# Load c√°c c√¢y quy·∫øt ƒë·ªãnh (VIPER)
tree_0_0 = load("log/viper_ToyPong-v0_0.0_all-leaves_all-depth.joblib")
tree_0_0001_pruned = load("log/viper_ToyPong-v0_pruned_0.0001_11120_29.joblib")
tree_0_1e05_pruned = load("log/viper_ToyPong-v0_pruned_1e-05_11120_29.joblib")
tree_0_1e06_pruned = load("log/viper_ToyPong-v0_pruned_1e-06_11120_29.joblib")

# T·∫°o danh s√°ch c√°c c√¢y ƒë√£ c·∫Øt t·ªâa
pruned_trees = [tree_0_0001_pruned, tree_0_1e05_pruned, tree_0_1e06_pruned]

# Danh s√°ch c√°c ch√≠nh s√°ch (PPO v√† VIPER)
models = [
    {"name": "PPO", "model": ppo_policy},
    {"name": "VIPER 0.0", "model": tree_0_0},
    {"name": "VIPER 0.0001 pruned", "model": tree_0_0001_pruned},
    {"name": "VIPER 1e05 pruned", "model": tree_0_1e05_pruned},
    {"name": "VIPER 1e06 pruned", "model": tree_0_1e06_pruned},
    # Th√™m ch√≠nh s√°ch m·ªõi ·ªü ƒë√¢y, v√≠ d·ª•:
    # {"name": "VIPER 0.001", "model": load("log/viper_ToyPong-v0_0.001_all-leaves_all-depth.joblib")},
]

# Class agent s·ª≠ d·ª•ng PPO
class PPOAgent:
    def __init__(self, model):
        self.model = model

    def act(self, observation):
        action, _ = self.model.predict(observation, deterministic=True)
        return action  # Tr·∫£ v·ªÅ h√†nh ƒë·ªông t·ª´ ch√≠nh s√°ch g·ªëc (PPO)

# Class agent s·ª≠ d·ª•ng c√¢y quy·∫øt ƒë·ªãnh
class DecisionTreeAgent:
    def __init__(self, model):
        self.model = model

    def act(self, observation):
        # Chuy·ªÉn ƒë·ªïi observation th√†nh np.float32
        observation = np.array(observation).reshape(1, -1).astype(np.float32)

        tree = self.model.tree_
        node = tree.apply(observation)  # L·∫•y node hi·ªán t·∫°i t·ª´ c√¢y

        # Duy·ªát qua c√°c node cho ƒë·∫øn khi g·∫∑p node l√°
        while tree.feature[node] != -2:  # N·∫øu node kh√¥ng ph·∫£i l√† node l√°
            # Ti·∫øn h√†nh ph√¢n nh√°nh
            if observation[0, tree.feature[node]] <= tree.threshold[node]:
                node = tree.children_left[node]
            else:
                node = tree.children_right[node]

        # Khi g·∫∑p node l√°, tr·∫£ v·ªÅ nh√£n c·ªßa node ƒë√≥
        return np.argmax(tree.value[node])  # Ho·∫∑c gi√° tr·ªã h√†nh ƒë·ªông t·ª´ node

# T·∫°o m√¥i tr∆∞·ªùng ToyPong
args = type('', (), {})()  # T·∫°o m·ªôt object r·ªóng ƒë·ªÉ truy·ªÅn ƒë·ªëi s·ªë
args.render = True  # Hi·ªÉn th·ªã pygame
args.rand_ball_start = False  # Gi·ªØ v·ªã tr√≠ ban ƒë·∫ßu c·ªë ƒë·ªãnh
env = ToyPong(args)

# Kh·ªüi t·∫°o c√°c agent cho m·ªói ch√≠nh s√°ch
agents = {model["name"]: PPOAgent(model["model"]) if model["name"] == "PPO" else DecisionTreeAgent(model["model"]) for model in models}

# Bi·∫øn ƒë·ªÉ l∆∞u s·ªë l·∫ßn kh√°c bi·ªát
diff_counts = {model["name"]: 0 for model in models}

# Ch·∫°y m√¥i tr∆∞·ªùng v√† so s√°nh c√°c agent
obs = env.reset()
done = False
step = 0
total_steps = 0

while not done:
    # L·∫•y h√†nh ƒë·ªông t·ª´ t·∫•t c·∫£ c√°c agent
    actions = {name: agent.act(obs) for name, agent in agents.items()}

    # Ki·ªÉm tra s·ª± kh√°c bi·ªát gi·ªØa c√°c h√†nh ƒë·ªông
    for name, action in actions.items():
        if action != actions["PPO"]:
            diff_counts[name] += 1

    # In ra k·∫øt qu·∫£
    print(f"\nüîπ Step {step}")
    # print(f"   - Observation: {obs}")
    # for name, action in actions.items():
    #     print(f"   - {name} Action: {action}")

    # Ch·∫°y m√¥i tr∆∞·ªùng theo ch√≠nh s√°ch VIPER (c√¢y quy·∫øt ƒë·ªãnh)
    obs, reward, done, _ = env.step(actions["VIPER 1e06 pruned"])  # C√≥ th·ªÉ thay ƒë·ªïi ch√≠nh s√°ch ·ªü ƒë√¢y

    # Render
    env.render()
    step += 1
    total_steps += 1

env.close()

# T√≠nh t·ªâ l·ªá kh√°c bi·ªát
diff_rates = {name: (count / total_steps) * 100 if total_steps > 0 else 0 for name, count in diff_counts.items()}

# Tr√¨nh b√†y k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng b·∫£ng
table = []
for name, diff_rate in diff_rates.items():
    if diff_rate == 0:
        conclusion = "‚úÖ Ho√†n to√†n kh·ªõp"
    elif diff_rate < 10:
        conclusion = "‚úÖ Kh·ªõp t∆∞∆°ng ƒë·ªëi"
    elif diff_rate < 30:
        conclusion = "‚ö†Ô∏è C√≥ s·ª± kh√°c bi·ªát ƒë√°ng k·ªÉ"
    else:
        conclusion = "‚ùå Kh√°c nhi·ªÅu, xem l·∫°i qu√° tr√¨nh hu·∫•n luy·ªán"
    
    table.append([name, f"{diff_counts[name]}/{total_steps}", f"{diff_rate:.2f}%", conclusion])

# In ra b·∫£ng k·∫øt qu·∫£
headers = ["Policy", "Differences (PPO)", "Difference Rate (%)", "Conclusion"]
print("\n===================== üìä K·∫æT LU·∫¨N üìä =====================")
print(tabulate(table, headers=headers, tablefmt="grid"))

def compare_multiple_trees(original_tree, pruned_trees, X_train, y_train, X_test, y_test):
    # So s√°nh c√°c th√¥ng s·ªë c√¢y
    headers = ["Thu·ªôc t√≠nh", "C√¢y g·ªëc"] + [f"C√¢y ƒë√£ c·∫Øt t·ªâa {i+1}" for i in range(len(pruned_trees))]

    # Th√¥ng s·ªë c√¢y g·ªëc v√† c√°c c√¢y ƒë√£ c·∫Øt t·ªâa
    table = [
        ["ƒê·ªô s√¢u c√¢y", original_tree.get_depth()] + [tree.get_depth() for tree in pruned_trees],
        ["S·ªë n√∫t l√°", original_tree.get_n_leaves()] + [tree.get_n_leaves() for tree in pruned_trees],
        ["S·ªë n√∫t t·ªïng", original_tree.tree_.node_count] + [tree.tree_.node_count for tree in pruned_trees],
        ["Chi ph√≠ c·∫Øt t·ªâa (ccp_alpha)", original_tree.ccp_alpha] + [tree.ccp_alpha for tree in pruned_trees],
        ["ƒê·ªô ch√≠nh x√°c tr√™n d·ªØ li·ªáu hu·∫•n luy·ªán", original_tree.score(X_train, y_train)] + [tree.score(X_train, y_train) for tree in pruned_trees],
        ["ƒê·ªô ch√≠nh x√°c tr√™n d·ªØ li·ªáu ki·∫øm tra", original_tree.score(X_test, y_test)] + [tree.score(X_test, y_test) for tree in pruned_trees],
    ]
    
    # In b·∫£ng
    print("\nSo s√°nh c√°c thu·ªôc t√≠nh c√¢y:\n")
    print(tabulate(table, headers=headers, tablefmt="grid"))
    
    # L∆∞u b·∫£ng so s√°nh v√†o file CSV
    with open("result_csv/multiple_tree_comparison.csv", mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        # Ghi ti√™u ƒë·ªÅ c·ªôt
        writer.writerow(headers)
        # Ghi n·ªôi dung b·∫£ng
        writer.writerows(table)

# Load c√¢y v√† dataset ƒë·ªÉ ki·ªÉm tra
dts_tree_0_0 = load("dataset/viper_ToyPong-v0_0.0_all-leaves_all-depth.joblib")
dts_test = load("dataset/viper_ToyPong-v0_0.0001_all-leaves_all-depth.joblib")  

# L·∫•y d·ªØ li·ªáu hu·∫•n luy·ªán t·ª´ dataset
X_train = np.array([traj[0] for traj in dts_tree_0_0])
y_train = np.array([traj[1] for traj in dts_tree_0_0])
sample_weight = np.array([traj[2] for traj in dts_tree_0_0])

# L·∫•y d·ªØ li·ªáu testtest
X_test = np.array([traj[0] for traj in dts_test])
y_test = np.array([traj[1] for traj in dts_test])

# So s√°nh c√¢y g·ªëc v√† c√¢y c√≥ pruning
compare_multiple_trees(tree_0_0, pruned_trees, X_train, y_train, X_test, y_test)